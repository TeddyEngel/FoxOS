// ordered_array -- Interface for creating, inserting and deleting from ordered arrays.

#ifndef ORDERED_ARRAY
#define ORDERED_ARRAY

#include <cstdint>

/**
  This array is insertion sorted - it always remains in a sorted state (between calls).
  It can store anything that can be cast to a void* -- so a uint32_t, or any pointer.
**/
typedef void* type_t;

/**
  A predicate should return nonzero if the first argument is less than the second. Else
  it should return zero.
**/
typedef int8_t (*lessthan_predicate_t)(type_t, type_t);

/**
  A standard less than predicate.
**/
int8_t standard_lessthan_predicate(type_t a, type_t b);

class ordered_array
{
public:
  ordered_array(uint32_t max_size, lessthan_predicate_t less_than);
  ordered_array(void *addr, uint32_t max_size, lessthan_predicate_t less_than);

  ~ordered_array();

  // Add an item into the array
  void insert(type_t item);

  // Lookup the item at index i.
  type_t lookup(uint32_t i);

  // Deletes the item at location i from the array.
  void erase(uint32_t i);

public:
  type_t *array;
  uint32_t size;
  uint32_t max_size;
  lessthan_predicate_t less_than;
};

#endif // ORDERED_ARRAY